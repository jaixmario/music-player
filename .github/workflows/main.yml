name: Android CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Notify
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Fix gradlew permissions
        run: |
          sudo apt-get update
          sudo apt-get install -y dos2unix
          dos2unix ./gradlew
          chmod +x ./gradlew

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Decode release keystore
        env:
          KEYSTORE_FILE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        run: echo "$KEYSTORE_FILE_BASE64" | base64 --decode > ${{ github.workspace }}/release.keystore

      - name: Auto-generate version code
        id: versioning
        run: |
          # Generate timestamp-based version code (YYYYMMDDHHMM)
          VERSION_CODE=$(date -u +"%Y%m%d%H%M")
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "Generated version code: $VERSION_CODE"

      - name: Build signed APK
        env:
          KEYSTORE_PATH: ${{ github.workspace }}/release.keystore
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          VERSION_CODE: ${{ steps.versioning.outputs.version_code }}
        run: |
          ./gradlew assembleRelease \
            -PversionCode=$VERSION_CODE

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release.apk
          retention-days: 5

      - name: Prepare notification assets
        id: prepare-notification
        run: |
          # Create build summary file
          echo "### Build Summary" > build-summary.md
          echo "- Build Number: $GITHUB_RUN_NUMBER" >> build-summary.md
          echo "- Workflow: $GITHUB_WORKFLOW" >> build-summary.md
          echo "- Runner: $RUNNER_OS" >> build-summary.md
          echo "- Triggered by: $GITHUB_ACTOR" >> build-summary.md
          echo "---" >> build-summary.md
          ./gradlew -q dependencies >> dependencies.txt

      - name: Send Telegram notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          # Version info
          VERSION_NAME=$(grep 'versionName' app/build.gradle.kts | cut -d '"' -f2)
          VERSION_CODE=${{ steps.versioning.outputs.version_code }}

          # Commit info
          COMMIT_HASH=$(git rev-parse --short HEAD)
          COMMIT_MESSAGE=$(git log -1 --pretty=%s)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          COMMIT_DATE=$(git log -1 --pretty=format:'%cr')
          WORKFLOW_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

          # Build status emoji
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="*Succeeded*"
          else
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="*Failed*"
          fi

          # Escape special characters for MarkdownV2
          ESCAPED_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed 's/[][\\`_*#()+-]/\\&/g')

          # Build caption template
          CAPTION="$STATUS_EMOJI *$STATUS_TEXT* $STATUS_EMOJI
          
          üì± *App Version*: \`v$VERSION_NAME\` (\`$VERSION_CODE\`)
          üÜî *Build*: #$GITHUB_RUN_NUMBER
          üîÄ *Branch*: \`${GITHUB_REF#refs/heads/}\`
          
          üìù *Commit*: \`$COMMIT_HASH\`
          üóì *When*: $COMMIT_DATE
          üë§ *Author*: $COMMIT_AUTHOR
          
          üí¨ *Message*: 
          
          $ESCAPED_MESSAGE
          
          üîó [View Workflow]($WORKFLOW_URL)"

          # Send files function
          send_to_telegram() {
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
              -F chat_id="${TELEGRAM_CHAT_ID}" \
              -F parse_mode="MarkdownV2" \
              -F document=@"$1" \
              -F caption="$CAPTION"
          }

          # Send APK if exists
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            send_to_telegram "app/build/outputs/apk/release/app-release.apk"
            echo "APK sent successfully"
          else
            echo "No APK found to send"
          fi

          # Send additional reports
          [ -f "build/reports/build-error-report.txt" ] && send_to_telegram "build/reports/build-error-report.txt"
          [ -f "build-summary.md" ] && send_to_telegram "build-summary.md"

          # Send status message
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$CAPTION" \
            -d parse_mode="MarkdownV2"

      - name: Update GitHub commit status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              context: "Android Build",
              description: '${{ job.status }}' === 'success' ? 'APK generated successfully' : 'Build failed'
            })